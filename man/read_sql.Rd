% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/read_sql.R
\name{read_sql}
\alias{read_sql}
\title{Read a table from SQL into R as a lazy tibble}
\usage{
read_sql(name, conn = connect_nfu(), ...)
}
\arguments{
\item{name}{the name of the table to read from, always including the schema
\emph{ie} "this_server.this_table"}

\item{conn}{a remote data source, \emph{eg} server + database created from
\code{\link[DBI:dbConnect]{DBI::dbConnect()}}. Calls connect_nfu() by default.}

\item{...}{Other arguments passed on to \code{\link[dplyr:tbl]{dplyr::tbl()}}.}
}
\value{
a lazy tibble, to be exact, of the class: tbl_Microsoft SQL Server,
tbl_dbi, tbl_sql, tbl_lazy, tbl
}
\description{
\code{read_sql()} gives NFU Pricing people an evocatively named way to read data
into R from a SQL server. Let me demonstrate:

\strong{Good:} \code{connect_nfu() |> tbl(I("information_schema.tables"))}

\strong{Better:} \code{read_sql("information_schema.tables")}

Surely better than writing something like tbl(I("my_server.my_table")),
read aloud like "tibble, eye", is writing something like "read sql".

Better than \code{\link[DBI:dbGetQuery]{DBI::dbGetQuery()}} \emph{and} \code{\link[DBI:dbReadTable]{DBI::dbReadTable()}},
it returns a lazy table instead of a data.frame.
Lazy tables are great!
See section 21.4 in https://r4ds.hadley.nz/databases.

Notice how, to access the default server, you simply give the table name.
}
\details{
It's great because:
\itemize{
\item you don't need to remember which functions and packages you need
in order to read a table from SQL into R \emph{eg} \code{\link[dplyr:tbl]{dplyr::tbl()}} and \code{\link[base:AsIs]{base::I()}}
\item you don't need to pass the connection object! At least, not if you're happy
with the default server connected to by connect_nfu()
}
}
\examples{
# read a SQL table from the default server
df <- read_sql("information_schema.tables")

# alternatively
conn <- connect_nfu()
df <- conn |> read_sql("information_schema.tables")

\dontrun{
# read a SQL table from a different server
conn <- connect_nfu("a_different_server")
df <- conn |> read_sql("information_schema.tables")
}
}
\seealso{
\code{\link[dplyr:tbl]{dplyr::tbl()}}, \code{\link[base:AsIs]{base::I()}}, \code{\link[dbplyr:in_schema]{dbplyr::in_schema()}},
\code{\link[DBI:Id]{DBI::Id()}}
}
